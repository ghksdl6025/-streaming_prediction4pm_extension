{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [],
   "source": [
    "from river import stream,tree,metrics\n",
    "import utils\n",
    "from encoding import prefix_bin\n",
    "import csv\n",
    "import copy\n",
    "import numpy as np\n",
    "from sklearn.metrics import classification_report, accuracy_score\n",
    "from tqdm import tqdm\n",
    "import pickle as pkl\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Experiment settings\n",
    "\n",
    "sample_num = 3\n",
    "dataset_label = 'bpic17_%s'%(sample_num)\n",
    "# dataset_loc = './data/'+ dataset_label +'.csv'\n",
    "classifier = 'htc'\n",
    "\n",
    "try:\n",
    "    os.makedirs('./result/%s'%(dataset_label))\n",
    "except:\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = stream.iter_csv(\n",
    "            './data/bpic17_sampling/bpic17_sampled_%s.csv'%(sample_num),\n",
    "            )\n",
    "\n",
    "totallength = len(list(dataset))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Bac drop column: drop=['END_DATE','ROLE','CLOSURE_TYPE','CLOSURE_REASON','WORKING_STATE','case_cost'],\n",
    "# dataset = stream.iter_csv(\n",
    "#             './data/bac_online_pending_small.csv',\n",
    "#             drop=['END_DATE','ROLE','CLOSURE_TYPE','CLOSURE_REASON','WORKING_STATE','case_cost'],\n",
    "#             target='outcome'\n",
    "#             )\n",
    "\n",
    "\n",
    "# Articial drop column: Variant, Variant index, Resource\n",
    "\n",
    "# dataset = stream.iter_csv(\n",
    "#             './data/IRO5k_labeled_sampled_newts.csv',\n",
    "#             drop=['Variant', 'Variant index', 'Resource'],\n",
    "#             target='outcome'\n",
    "#             )\n",
    "# enctype = 'Index-base'\n",
    "\n",
    "# BPIC2015: Variant, Variant index, Resource\n",
    "\n",
    "# dataset = stream.iter_csv(\n",
    "#             './data/bpic15_2.csv',\n",
    "#             target='outcome'\n",
    "#             )\n",
    "# enctype = 'Index-base'\n",
    "\n",
    "# BPIC2017: Complete Timestamp\n",
    "\n",
    "dataset = stream.iter_csv(\n",
    "            './data/bpic17_sampling/bpic17_sampled_%s.csv'%(sample_num),\n",
    "            drop=['Complete Timestamp'],\n",
    "            target='outcome'\n",
    "            )\n",
    "enctype = 'Index-base'\n",
    "\n",
    "# Road traffic fine process: Complete Timestamp\n",
    "\n",
    "# dataset = stream.iter_csv(\n",
    "#             './data/road_traffic_fine_process.csv',\n",
    "#             target='outcome'\n",
    "#             )\n",
    "# enctype = 'Index-base'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [],
   "source": [
    "if dataset_label =='bpic15':\n",
    "    key_pair={\n",
    "     }\n",
    "    catatars= ['activity','resource']\n",
    "\n",
    "elif dataset_label == 'bpic17' or dataset_label == 'bpic17_%s'%(sample_num):\n",
    "    #BPIC17\n",
    "\n",
    "    key_pair = {\n",
    "        'Case ID':'caseid',\n",
    "        'Activity':'activity',\n",
    "        'Resource':'resource',\n",
    "        'Start Timestamp':'ts',\n",
    "    }\n",
    "    catatars= ['activity','resource']\n",
    "\n",
    "elif dataset_label =='iro5k':\n",
    "    #IRO5K\n",
    "    \n",
    "    key_pair = {\n",
    "            'Case ID':'caseid',\n",
    "            'Activity':'activity',\n",
    "            'Complete Timestamp':'ts',\n",
    "    }\n",
    "    catatars= ['activity']\n",
    "\n",
    "elif dataset_label =='road_traffic_fine_process':\n",
    "    #Road_traffic\n",
    "\n",
    "    key_pair = {\n",
    "        'Case ID':'caseid',\n",
    "        'Activity':'activity',\n",
    "        'Resource':'resource',\n",
    "        'Complete Timestamp':'ts',\n",
    "    }\n",
    "    catatars= ['activity','resource']\n",
    "\n",
    "\n",
    "case_dict ={}\n",
    "training_models ={}\n",
    "feature_matrix ={}\n",
    "\n",
    "casecount = 0\n",
    "rowcounter = 0\n",
    "resultdict ={}\n",
    "acc_dict ={}\n",
    "window_acc_dict={}\n",
    "running_case = 0\n",
    "prediction_result = {}\n",
    "graceperiod_finish=0\n",
    "finishedcases = set()\n",
    "usedingrace = set()\n",
    "window_size = 50\n",
    "\n",
    "window_label_dist ={}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0 % Case finished: 0\n",
      "2.07 % Case finished: 1\n",
      "4.13 % Case finished: 7\n",
      "6.2 % Case finished: 23\n",
      "8.26 % Case finished: 38\n",
      "10.33 % Case finished: 69\n",
      "12.39 % Case finished: 95\n",
      "14.46 % Case finished: 127\n",
      "16.52 % Case finished: 145\n",
      "18.59 % Case finished: 159\n",
      "20.65 % Case finished: 183\n"
     ]
    }
   ],
   "source": [
    "for x,y in dataset:\n",
    "    if rowcounter%500 == 0:\n",
    "        print(round(rowcounter*100/totallength,2) ,'%', 'Case finished: %s'%(casecount))\n",
    "    rowcounter +=1\n",
    "    # Event stream change dictionary keys\n",
    "    x = utils.dictkey_chg(x, key_pair)\n",
    "    x['ts'] = x['ts'][:-4]\n",
    "#     x['ts'] += ' 00:00:00' \n",
    "\n",
    "    # Check label possible\n",
    "    # x = utils.set_label(x)\n",
    "    x['outcome'] =y \n",
    "    # Initialize case by prefix length\n",
    "    caseid = x['caseid']\n",
    "    outcome = x['outcome']\n",
    "#     progress = x['progress']\n",
    "\n",
    "    x.pop('caseid')\n",
    "    x.pop('outcome')\n",
    "    \n",
    "#     x.pop('progress')\n",
    "\n",
    "    case_bin = prefix_bin(caseid, x)\n",
    "    case_bin.set_enctype(enctype)\n",
    "\n",
    "    if caseid not in list(case_dict.keys()):\n",
    "        case_bin.set_prefix_length(1)    \n",
    "        case_dict[caseid] = []\n",
    "    elif caseid in finishedcases:\n",
    "        pass\n",
    "    else:\n",
    "        case_bin.set_prefix_length(len(case_dict[caseid])+1)\n",
    "        case_bin.set_prev_enc(case_dict[caseid][-1])\n",
    "    \n",
    "    # Encode event and cases and add to DB\n",
    "    case_bin.update_truelabel(outcome)   \n",
    "    case_bin.update_encoded(catattrs=catatars,enctype=enctype)\n",
    "    ts = case_bin.event['ts']\n",
    "    case_dict[caseid].append(case_bin)\n",
    "    usedingrace.add(caseid)\n",
    "    # Detect label appeared case \n",
    "    if outcome != '' and caseid not in finishedcases:\n",
    "        finishedcases.add(caseid)\n",
    "        # Adding newly finished case to training set.    \n",
    "        casecount +=1\n",
    "        # Grace period to collect feature matrix\n",
    "        if casecount <200:\n",
    "            case_length = len(case_dict[caseid])\n",
    "            for prefix in range(1, case_length):\n",
    "                if 'prefix_%s'%(prefix+1) not in list(feature_matrix.keys()):\n",
    "                    feature_matrix['prefix_%s'%(prefix+1)]=set()\n",
    "                    # Initialize classifier and performance matrix and updating count\n",
    "                    training_models['prefix_%s'%(prefix+1)] = [tree.HoeffdingTreeClassifier(grace_period=100,split_criterion='info_gain'),\n",
    "                                                               metrics.Accuracy(), \n",
    "                                                               utils.window_evaluation(window_size),\n",
    "                                                               0,0]\n",
    "                feature_list = list(case_dict[caseid][prefix].encoded.keys())\n",
    "                for x in feature_list: feature_matrix['prefix_%s'%(prefix+1)].add(x) \n",
    "            graceperiod_finish = case_dict[caseid][-1].event['ts']\n",
    "            for t in training_models.keys():\n",
    "                training_models[t][4] = graceperiod_finish\n",
    "            case_dict.pop(caseid)            \n",
    "        else:\n",
    "            break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23\n",
      "dict_keys(['prefix_2', 'prefix_3', 'prefix_4', 'prefix_5', 'prefix_6', 'prefix_7', 'prefix_8', 'prefix_9', 'prefix_10', 'prefix_11', 'prefix_12', 'prefix_13', 'prefix_14', 'prefix_15', 'prefix_16', 'prefix_17', 'prefix_18', 'prefix_19', 'prefix_20', 'prefix_21', 'prefix_22', 'prefix_23'])\n"
     ]
    }
   ],
   "source": [
    "maximum_prefix = sorted([int(x.split('_')[1]) for x in training_models.keys()])[-1]\n",
    "print(maximum_prefix)\n",
    "print(training_models.keys())\n",
    "maximum_prefix = 15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24.78 % Case finished: 200 Running case: 50\n",
      "37.17 % Case finished: 267 Running case: 209\n",
      "49.56 % Case finished: 421 Running case: 294\n",
      "61.95 % Case finished: 696 Running case: 249\n",
      "74.34 % Case finished: 932 Running case: 235\n",
      "86.73 % Case finished: 1169 Running case: 234\n",
      "99.12 % Case finished: 1523 Running case: 61\n"
     ]
    }
   ],
   "source": [
    "case_dict ={}\n",
    "for x,y in dataset:\n",
    "    if rowcounter%3000 == 0:\n",
    "        print(round(rowcounter*100/totallength,2) ,'%', 'Case finished: %s'%(casecount), 'Running case: %s'%(running_case))\n",
    "        \n",
    "    rowcounter +=1\n",
    "    # Event stream change dictionary keys\n",
    "    x = utils.dictkey_chg(x, key_pair)\n",
    "    x['ts'] = x['ts'][:-4]\n",
    "#     x['ts'] += ' 00:00:00' \n",
    "\n",
    "    # Check label possible\n",
    "    # x = utils.set_label(x)\n",
    "    x['outcome'] =y \n",
    "    # Initialize case by prefix length\n",
    "    caseid = x['caseid']\n",
    "    outcome = x['outcome']\n",
    "    x.pop('caseid')\n",
    "    x.pop('outcome')\n",
    "    \n",
    "    if caseid not in usedingrace:\n",
    "        case_bin = prefix_bin(caseid, x)\n",
    "        case_bin.set_enctype(enctype)\n",
    "\n",
    "        if caseid not in list(case_dict.keys()):\n",
    "            case_bin.set_prefix_length(1)    \n",
    "            case_dict[caseid] = []\n",
    "            running_case +=1\n",
    "        elif caseid in finishedcases:\n",
    "            pass\n",
    "        else:\n",
    "            case_bin.set_prefix_length(len(case_dict[caseid])+1)\n",
    "            case_bin.set_prev_enc(case_dict[caseid][-1])\n",
    "\n",
    "        # Encode event and cases and add to DB\n",
    "        case_bin.update_truelabel(outcome)   \n",
    "        case_bin.update_encoded(catattrs=catatars,enctype=enctype)\n",
    "        ts = case_bin.event['ts']\n",
    "        if case_bin.prefix_length >=2 and case_bin.prefix_length <= maximum_prefix:\n",
    "            case_bin.encoded = utils.readjustment_training(case_bin.encoded, feature_matrix['prefix_%s'%(case_bin.prefix_length)])\n",
    "            x_test = case_bin.encoded\n",
    "            model = training_models['prefix_%s'%(case_bin.prefix_length)][0]\n",
    "            y_pred = model.predict_one(x_test)\n",
    "            if type(y_pred) != str:\n",
    "                y_pred = 'False'\n",
    "            modelid,pred_value = copy.deepcopy(training_models['prefix_%s'%(case_bin.prefix_length)][3]), copy.deepcopy(y_pred)\n",
    "            case_bin.update_prediction((modelid, (pred_value,ts)))        \n",
    "        case_dict[caseid].append(case_bin)\n",
    "\n",
    "        # Detect label appeared case \n",
    "        if outcome != '' and caseid not in finishedcases:\n",
    "            finishedcases.add(caseid)\n",
    "            # Adding newly finished case to training set.\n",
    "            casecount +=1    \n",
    "            # Real training start\n",
    "\n",
    "            # Modify encoded attributes of cases with feature matrix\n",
    "            case_length = len(case_dict[caseid])\n",
    "            if case_length >maximum_prefix:\n",
    "                case_length =maximum_prefix\n",
    "            y = outcome\n",
    "            for prefix in range(1, case_length):\n",
    "                case_dict[caseid][prefix].update_truelabel(y)\n",
    "                x = case_dict[caseid][prefix].encoded\n",
    "                model = training_models['prefix_%s'%(prefix+1)][0]\n",
    "                model.learn_one(x,y)\n",
    "                training_models['prefix_%s'%(prefix+1)][3] +=1\n",
    "                last_pred_idx = sorted(case_dict[caseid][prefix].call_predicted().keys())[-1]\n",
    "                last_pred = case_dict[caseid][prefix].call_predicted()[last_pred_idx][0]\n",
    "                y_pred = model.predict_one(x)\n",
    "                training_models['prefix_%s'%(prefix+1)][1].update(y,y_pred)\n",
    "                training_models['prefix_%s'%(prefix+1)][2].update(y,last_pred)\n",
    "                for cases in list(case_dict.keys()):\n",
    "                    if len(case_dict[cases]) >prefix:\n",
    "                        x_test = case_dict[cases][prefix].encoded\n",
    "                        y_pred = model.predict_one(x_test)\n",
    "                        modelid,pred_value = copy.deepcopy(training_models['prefix_%s'%(prefix+1)][3]), copy.deepcopy(y_pred)\n",
    "                        case_dict[cases][prefix].update_prediction((modelid, (pred_value,ts)))\n",
    "                        prediction_key = str(cases)+'_'+str(prefix+1)\n",
    "#                         if str(cases)+'_'+str(prefix+2) not in prediction_result.keys():\n",
    "#                             if prediction_key not in prediction_result.keys():\n",
    "#                                 prediction_result[prediction_key] = {}\n",
    "#                                 prediction_result[prediction_key][modelid] = (pred_value,ts)\n",
    "#                             else:\n",
    "#                                 prediction_result[prediction_key][modelid] = (pred_value,ts)\n",
    "            \n",
    "            copying = copy.deepcopy(case_dict[caseid])\n",
    "            resultdict[caseid] = copying\n",
    "            \n",
    "            case_dict[caseid] =[]\n",
    "            running_case -=1\n",
    "            \n",
    "            modelupdate_num = {}\n",
    "#             for t in list(training_models.keys()):\n",
    "#                 modelupdate_num[t] = training_models[t][3]\n",
    "#             finished_cases_bin[casecount] =modelupdate_num \n",
    "                \n",
    "            for prefix in training_models.keys():\n",
    "                if prefix not in list(acc_dict.keys()):\n",
    "                    acc_dict[prefix]=[training_models[prefix][1].get()]\n",
    "                    \n",
    "                else:\n",
    "                    acc_dict[prefix].append(training_models[prefix][1].get())\n",
    "            \n",
    "            for t in training_models.keys():\n",
    "                if t not in list(window_acc_dict.keys()):\n",
    "                    window_acc_dict[t] =[training_models[t][2].get()]\n",
    "                else:\n",
    "                    window_acc_dict[t].append(training_models[t][2].get())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1386\n",
      "1375\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f3ccf41c208>]"
      ]
     },
     "execution_count": 262,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "